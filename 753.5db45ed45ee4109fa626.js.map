{"version":3,"file":"753.5db45ed45ee4109fa626.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/immedia/constants.ts","webpack://telegram-t/./src/hooks/useInterval.ts","webpack://telegram-t/./src/components/middle/immedia/helpers.ts","webpack://telegram-t/./src/components/middle/immedia/Immedia.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version alpha 1.25**\\n\\n👏 **Harder**\\n• Brand new Media Viewer for touch screens with swipe, pinch, double-tap and pan gestures.\\n• Read receipts are available for your messages in groups.\\n• Join Group, Subscribe to Channel and Start Bot buttons are now shown on mobile screens.\\n• Added support for wide screens up to 4K.\\n• More accessibility support.\\n\\n🤩 **Better**\\n• Context menus are more compact.\\n• Animations adjust to be more native on various devices.\\n• Several UI improvements.\\n\\n🚀 **Faster**\\n• Slide transitions and context menus were drastically optimized.\\n• UI effects are faster and more efficient.\\n\\n💪 **Stronger**\\n• Deep links properly open in Safari.\\n• Increased protocol security.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: string, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: string;\n  globalSearchChatId?: string;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<string, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  allListIds,\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, allListIds, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError' | 'setLeftColumnWidth' | 'resetLeftColumnWidth'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n  setLeftColumnWidth,\n  resetLeftColumnWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError', 'setLeftColumnWidth', 'resetLeftColumnWidth',\n  ]),\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, (\n  'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot' | 'openCallFallbackConfirm'\n)>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  isRightColumnShown,\n  canExpandActions,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n  openCallFallbackConfirm,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot', 'openCallFallbackConfirm',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' |\n  'closeAudioPlayer' |\n  'setAudioPlayerVolume' |\n  'setAudioPlayerPlaybackRate' |\n  'setAudioPlayerMuted'\n)>;\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n  setAudioPlayerVolume,\n  setAudioPlayerPlaybackRate,\n  setAudioPlayerMuted,\n  focusMessage,\n  closeAudioPlayer,\n}) => {\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(\n    actions,\n    ['focusMessage', 'closeAudioPlayer', 'setAudioPlayerVolume', 'setAudioPlayerPlaybackRate', 'setAudioPlayerMuted'],\n  ),\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'joinGroupCall' | 'subscribeToGroupCallUpdates'>;\n\nconst GroupCallTopPane: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  joinGroupCall,\n  subscribeToGroupCallUpdates,\n  usersById,\n  chatsById,\n}) => {\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'joinGroupCall',\n    'subscribeToGroupCallUpdates',\n  ]),\n)(GroupCallTopPane));\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isUserId,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<string, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","const WEBSOCKET_URL = process.env.APP_ENV === 'production'\n  ? 'https://immedia.herokuapp.com/ws'\n  : 'http://localhost:3000/ws';\n\n// String pre-attached to console.log messages\nconst INIT = 'IMMEDIA: ';\n\nconst WEBSOCKET_RECONNECTION_RATE = 1000 * 3; // 3 seconds\nconst GC_RATE = 1500; // 1.5 seconds\nconst REMOVE_THRESHOLD = 1000 * 20; // 20 seconds\nconst SNAPSHOT_RATE = 500; // 0.5 seconds\nconst PING_RATE = 1000 * 5; // 5 seconds\nconst UPDATE_RATE = 1000 * 1; // 1 second\n\nexport { WEBSOCKET_URL };\nexport { INIT };\nexport {\n  WEBSOCKET_RECONNECTION_RATE, GC_RATE, REMOVE_THRESHOLD, SNAPSHOT_RATE, PING_RATE, UPDATE_RATE,\n};\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nexport default function useInterval(\n  callback: Function,\n  delay: number | undefined,\n) {\n  const savedCallback = useRef<Function>(() => undefined);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== undefined) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [delay]);\n}\n","const formatRoom = (room: string) => room.replace('-', 's');\n\nconst definedRoom = () => {\n  if (process.env.IMMEDIA_ROOM_ID === '') {\n    // eslint-disable-next-line no-console\n    console.error('IMMEDIA_ROOM_ID is not defined in the .env file.');\n  }\n};\n\ndefinedRoom();\n\nexport { formatRoom };\n","import SockJS from 'sockjs-client';\nimport React, {\n  FC,\n  useEffect,\n  useCallback,\n  useState,\n  useRef,\n  memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { selectUser } from '../../../modules/selectors';\n\nimport { ApiUser } from '../../../api/types';\n\nimport Button from '../../ui/Button';\n\nimport {\n  WEBSOCKET_URL,\n  INIT,\n  GC_RATE,\n  REMOVE_THRESHOLD,\n  SNAPSHOT_RATE,\n  PING_RATE,\n  UPDATE_RATE,\n  WEBSOCKET_RECONNECTION_RATE,\n} from './constants';\n\nimport useInterval from '../../../hooks/useInterval';\n\nimport { formatRoom } from './helpers';\n\nimport './Immedia.scss';\n\ntype ParticipantsType = {\n  id: string;\n  nickname?: string;\n  timestamp?: number;\n  image?: string;\n};\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst Immedia: FC<OwnProps & StateProps> = ({ chatId, currentUser }) => {\n  const [roomId, setRoomId] = useState<String | undefined>(undefined);\n  // State that tracks when update is being run. Triggers another update after UPDATE_RATE seconds.\n  const [lastSnapshot, setLastSnapshot] = useState<string | undefined>(\n    undefined,\n  );\n  const [messageId, setMessageId] = useState(0);\n  const [userId, setUserId] = useState<string | undefined>(undefined);\n  const [nickname, setNickname] = useState('');\n  const [awareness, setAwareness] = useState(false);\n  const [participants, setParticipants] = useState<ParticipantsType[]>([]);\n  const [reconnection, setReconnection] = useState(false);\n  const [connected, setConnected] = useState(false);\n\n  const wsRef = useRef<WebSocket | undefined>(undefined);\n  // eslint-disable-next-line  no-null/no-null\n  const canvasMeRef = useRef<HTMLCanvasElement | null>(null);\n  // eslint-disable-next-line  no-null/no-null\n  const videoMeRef = useRef<HTMLVideoElement | null>(null);\n\n  const isParticipantPresent = (id: string) => participants.some((p) => p.id === id);\n\n  const unsubscribeUserId = useCallback(() => {\n    const currentMessageId = messageId + 1;\n    setMessageId(currentMessageId);\n    const message = {\n      msgId: currentMessageId,\n      id: userId,\n      room: roomId,\n      type: 'uns',\n    };\n    wsRef.current?.send(JSON.stringify(message));\n  }, [userId, roomId, messageId]);\n\n  const subscribeUserId = useCallback(() => {\n    const currentMessageId = messageId + 1;\n    setMessageId(currentMessageId);\n    const currentRoomId = formatRoom(chatId);\n    setRoomId(currentRoomId);\n    const message = {\n      msgId: currentMessageId,\n      type: 'sub',\n      room: currentRoomId,\n      data: { password: false },\n    };\n    wsRef.current?.send(JSON.stringify(message));\n  }, [messageId, chatId]);\n\n  const createConnection = () => {\n    wsRef.current = new SockJS(WEBSOCKET_URL);\n\n    wsRef.current.onopen = () => {\n      // eslint-disable-next-line no-console\n      console.log(INIT, 'ws opened');\n      setConnected(true);\n      // if awareness was activated (reconnection), then subscribe to the room again\n      if (awareness) subscribeUserId();\n    };\n    wsRef.current.onclose = () => {\n      wsRef.current = undefined;\n      setConnected(false);\n      unsubscribeUserId();\n      setUserId(undefined);\n      // eslint-disable-next-line no-console\n      console.log(INIT, 'ws closed');\n      // reconnect\n      setReconnection(true);\n    };\n    wsRef.current.onerror = (event) => {\n      // eslint-disable-next-line no-console\n      console.log(INIT, 'ws error');\n      // eslint-disable-next-line no-console\n      console.log(INIT, event);\n      wsRef.current?.close();\n    };\n  };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const createConnectionCallback = useCallback(createConnection, [awareness]);\n\n  useEffect(() => {\n    if (reconnection) {\n      setTimeout(() => {\n        // eslint-disable-next-line no-console\n        console.log(INIT, 'Reconnecting WS...');\n        createConnectionCallback();\n      }, WEBSOCKET_RECONNECTION_RATE);\n      setReconnection(false);\n    }\n  }, [reconnection, createConnectionCallback]);\n\n  useEffect(() => {\n    if (!wsRef.current) createConnectionCallback();\n  }, [createConnectionCallback]);\n\n  const cleanUp = () => {\n    // eslint-disable-next-line no-console\n    console.log(INIT, 'Cleaning up!');\n    setParticipants([]);\n    setAwareness(false);\n    setLastSnapshot(undefined);\n    setUserId(undefined);\n    setRoomId(undefined);\n    // TODO: Check how to clean up tracks when user changes chats\n    // FIX: Sometimes it works (i.e., disable webcam light), sometimes it doesn't.\n    if (videoMeRef.current) {\n      if (videoMeRef.current.srcObject) {\n        const tracks = (videoMeRef.current.srcObject as MediaStream).getTracks();\n        tracks.forEach((track) => track.stop());\n      }\n    }\n  };\n\n  useEffect(() => {\n    // log the number of participants in the room\n    // eslint-disable-next-line no-console\n    if (participants.length) console.log(INIT, `There are ${1 + participants.length} participants in the room`);\n  }, [participants]);\n\n  const joinedParticipant = (participant: ParticipantsType) => {\n    setParticipants([...participants, participant]);\n  };\n\n  const updatedParticipant = (participant: ParticipantsType) => {\n    setParticipants(\n      participants.map((p) => (p.id === participant.id ? participant : p)),\n    );\n  };\n\n  const leftParticipant = (participant: ParticipantsType) => {\n    setParticipants(participants.filter((p) => p.id !== participant.id));\n  };\n\n  // Sends a re-subscription when there are reconnections.\n  useInterval(() => {\n    subscribeUserId();\n  }, awareness && connected && userId === undefined ? WEBSOCKET_RECONNECTION_RATE : undefined);\n\n  const handleMessage = useCallback((data: any) => {\n    const messageData = data.data;\n    switch (data.type) {\n      case 'join':\n        // {type: 'join', data: 'idxxx'}\n        if (!isParticipantPresent(messageData)) joinedParticipant({ id: messageData });\n        break;\n      case 'update':\n        // {type: 'update', data: {id: 'idxxx', timestamp: 123456789, nickname: 'nckxxx', image: 'img_url'}}\n        // check if participant is already present\n        if (isParticipantPresent(messageData.id)) updatedParticipant(messageData);\n        else joinedParticipant(messageData);\n        break;\n      case 'left':\n        // {type: 'left', data: ['idxxx', 'idyyy', ...]}\n        messageData.forEach((id: string) => leftParticipant({ id }));\n        break;\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [participants]);\n\n  useEffect(() => {\n    if (connected && wsRef.current) {\n      wsRef.current.onmessage = (event) => {\n        const response = JSON.parse(event.data);\n        const { data } = response;\n        // eslint-disable-next-line no-console\n        console.log(INIT, 'RECEIVED MESSAGE!');\n        // eslint-disable-next-line no-console\n        console.log(INIT, response);\n        if (data.id && data.success === true) {\n          // eslint-disable-next-line no-console\n          console.log(INIT, 'SET USER ID: ', data.id);\n          setUserId(data.id);\n        }\n        handleMessage(response);\n      };\n    }\n  }, [handleMessage, connected]);\n\n  useEffect(() => {\n    // Add whitespace until data is loaded\n    setNickname(currentUser?.username || '\\u00a0\\u00a0');\n  }, [currentUser]);\n\n  const enableAwareness = () => {\n    if (wsRef.current) {\n      // eslint-disable-next-line no-console\n      console.log(INIT, 'Enabled Awareness');\n      subscribeUserId();\n      setAwareness(true);\n    }\n  };\n\n  const disableAwareness = () => {\n    // eslint-disable-next-line no-console\n    console.log(INIT, 'Disabled Awareness');\n    if (wsRef.current && userId !== undefined) unsubscribeUserId();\n    cleanUp();\n  };\n\n  useEffect(() => {\n    const getParticipantsSnapshots = () => {\n      // update each participant's snapshot\n      participants.forEach((participant) => {\n        // eslint-disable-next-line no-console\n        console.log(INIT, 'Getting snapshot for', participant);\n        const canvas = document.getElementById(\n          `canvas-${participant.id}`,\n        ) as HTMLCanvasElement;\n        if (canvas) {\n          const context = canvas.getContext('2d');\n          const image = new Image();\n          image.onload = () => {\n            context?.drawImage(image, 0, 0, canvas.width, canvas.height);\n          };\n          if (participant.image) image.src = participant.image;\n        }\n      });\n    };\n    if (awareness && participants.length) getParticipantsSnapshots();\n  }, [participants, awareness]);\n\n  const getSnapshotVideo = () => {\n    if (canvasMeRef.current) {\n      const context = canvasMeRef.current.getContext('2d');\n\n      const cbk = (stream: MediaStream) => {\n        if (videoMeRef.current && context) {\n          videoMeRef.current.srcObject = stream;\n          // Wait some time beacuse the video is not ready\n          // FIX: Maybe there's a better way to do this.\n          // TRY: https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/ImageCapture\n          setTimeout(() => {\n            const video = videoMeRef.current;\n            const canvas = canvasMeRef.current;\n            // eslint-disable-next-line  no-null/no-null\n            if (video === null || canvas === null) return;\n            // show snapshot\n            context.drawImage(\n              video,\n              160,\n              120,\n              360,\n              240,\n              0,\n              0,\n              canvas.width,\n              canvas.height,\n            );\n            const image = canvas.toDataURL();\n            setLastSnapshot(image);\n          }, SNAPSHOT_RATE / 5);\n        }\n      };\n\n      if (navigator.mediaDevices.getUserMedia) {\n        // TODO: Rewrite using async/await\n        navigator.mediaDevices\n          .getUserMedia({ video: true, audio: false })\n          .then((stream) => cbk(stream))\n          .catch((err) => {\n            // eslint-disable-next-line no-console\n            console.error(err);\n          });\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(new Error(`${INIT}There is no user media`));\n      }\n    }\n  };\n\n  useInterval(() => {\n    getSnapshotVideo();\n  }, awareness ? SNAPSHOT_RATE : undefined);\n\n  // GC that runs every GC_RATE seconds and checks if, for each participant,\n  // their last snapshot was taken inside a REMOVE_THRESHOLD seconds time frame.\n  // If not, it will remove the participant.\n  const updateParticipants = () => {\n    participants.forEach((participant) => {\n      const removeThreshold = new Date().getTime() - REMOVE_THRESHOLD;\n      if (participant.timestamp && participant.timestamp < removeThreshold) {\n        setParticipants(participants.filter((p) => p.id !== participant.id));\n      }\n    });\n  };\n\n  useInterval(() => {\n    updateParticipants();\n  }, awareness && wsRef.current !== undefined ? GC_RATE : undefined);\n\n  const sendUpdate = useCallback(() => {\n    const currentMessageId = messageId + 1;\n    setMessageId(currentMessageId);\n    const message = {\n      msgId: currentMessageId,\n      id: userId,\n      type: 'app',\n      room: roomId,\n      data: {\n        type: 'update',\n        data: {\n          image: lastSnapshot,\n          timestamp: new Date().getTime(),\n          nickname,\n          id: userId,\n        },\n      },\n    };\n    // eslint-disable-next-line no-console\n    console.log(INIT, 'Updating with message: ', message);\n    wsRef.current?.send(JSON.stringify(message));\n  }, [userId, messageId, roomId, lastSnapshot, nickname]);\n\n  useInterval(() => {\n    sendUpdate();\n  }, awareness && connected && userId ? UPDATE_RATE : undefined);\n\n  // TODO: Define the Heartbeat function to keep track user connection.\n  // Keep Track of connection status\n  const ping = () => {\n    const type = 'ping';\n    const currentMessageId = messageId + 1;\n    setMessageId(currentMessageId);\n    const message = {\n      msgId: currentMessageId,\n      type,\n      room: roomId,\n      data: undefined,\n    };\n    // eslint-disable-next-line no-console\n    console.log(INIT, `${type.toUpperCase()}: `, message);\n    wsRef.current?.send(JSON.stringify(message));\n  };\n\n  useInterval(() => {\n    ping();\n  }, awareness && connected && userId ? PING_RATE : undefined);\n\n  return (\n    <div className=\"immedia-presence\">\n      {/* Participants Header */}\n      <div\n        className={`immedia-header custom-scroll ${\n          awareness || 'immedia-background'\n        }`}\n      >\n        {awareness && (\n          <div className=\"rows\">\n            <div key={userId} className=\"participant participant-me\">\n              <video\n                ref={videoMeRef}\n                autoPlay\n                className=\"video-me\"\n              >\n                <track kind=\"captions\" />\n              </video>\n              <canvas\n                ref={canvasMeRef}\n                className=\"photo-canvas\"\n                width=\"70\"\n                height=\"50\"\n              />\n              <text className=\"photo-caption\">{nickname}</text>\n            </div>\n            {participants\n              && participants.map(\n                ({ id, image, nickname: participantNickname }) => {\n                  return image === undefined ? (\n                    <div key={id} className=\"participant\" />\n                  ) : (\n                    <div key={id} className=\"participant participant-not-me\">\n                      <canvas\n                        className=\"photo-canvas\"\n                        id={`canvas-${id}`}\n                      />\n                      <text className=\"photo-caption\">{participantNickname}</text>\n                    </div>\n                  );\n                },\n              )}\n          </div>\n        )}\n      </div>\n      {/* Action Buttons */}\n      { process.env.IMMEDIA_ROOM_ID !== undefined && process.env.IMMEDIA_ROOM_ID === chatId && (\n        <Button\n          className=\"enable-disable-awareness\"\n          color=\"primary\"\n          onClick={awareness ? disableAwareness : enableAwareness}\n        >\n          {awareness ? 'Disable Awareness' : 'Enable Awareness'}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId\n        ? selectUser(global, currentUserId)\n        : undefined,\n    };\n  })(Immedia),\n);\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000, lang)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n      />\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n  openChat: GlobalActions['openChat'];\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint' | 'openChat'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = (\n    forwardInfo && (!isChatWithSelf || isScheduled) && !isRepliesChat && !forwardInfo.isLinkedChannelPost\n  );\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = (\n    threadInfo && (!isInDocumentGroup || isLastInDocumentGroup) && messageListType === 'thread' && !noComments\n  );\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} openChat={openChat} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n    'openChat',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && document.getElementById(anchorIdRef.current);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    usersById?: Record<string, ApiUser>;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' |\n  'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  openChat,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport Immedia from './immedia/Immedia';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode' |\n  'closePaymentModal' | 'clearReceipt' | 'joinChannel' | 'sendBotCommand' | 'restartBot'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n  closePaymentModal,\n  clearReceipt,\n  joinChannel,\n  sendBotCommand,\n  restartBot,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    setIsReady(false);\n  }\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || withMessageListBottomShift);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady && !willSwitchMessageList}\n            />\n            <Immedia chatId={renderingChatId} />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={() => setIsReady(true)}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady && !willSwitchMessageList}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady && !willSwitchMessageList}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n    'closePaymentModal', 'clearReceipt', 'joinChannel', 'sendBotCommand', 'restartBot',\n  ]),\n)(MiddleColumn));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact,\n  isChatAdmin,\n  isChatChannel,\n  isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar' | 'addContact'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n  addContact,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n    'addContact',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' | 'loadCommonChats' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState' |\n  'openChat'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  loadCommonChats,\n  openChat,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n    'loadCommonChats',\n    'openChat',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelMessageMediaDownload'>;\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps & DispatchProps> = ({\n  activeDownloads,\n  messages,\n  cancelMessageMediaDownload,\n}) => {\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory<ApiMediaFormat.BlobUrl>(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['cancelMessageMediaDownload']),\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' |\n  'loadCountryList' | 'ensureTimeFormat' | 'checkVersionNotification'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  ensureTimeFormat,\n  openStickerSetShortName,\n  checkVersionNotification,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList', 'ensureTimeFormat',\n    'checkVersionNotification',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","selectUser","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","currentUserId","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userId","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","fullInfo","targetChat","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","some","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","omit","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","langCode","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","allListIds","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","handleSwitchTab","forceOnHeavyAnimation","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","width","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","isAudioPlayerRendered","Infinity","getMessageKey","INIT","useInterval","delay","savedCallback","setInterval","clearInterval","currentUser","roomId","setRoomId","lastSnapshot","setLastSnapshot","setMessageId","setUserId","nickname","setNickname","awareness","setAwareness","setParticipants","reconnection","setReconnection","connected","setConnected","wsRef","canvasMeRef","videoMeRef","isParticipantPresent","unsubscribeUserId","currentMessageId","msgId","room","send","subscribeUserId","currentRoomId","replace","createConnectionCallback","SockJS","onopen","onclose","onerror","close","joinedParticipant","handleMessage","messageData","leftParticipant","onmessage","parse","success","context","cbk","stream","srcObject","toDataURL","SNAPSHOT_RATE","mediaDevices","getUserMedia","getSnapshotVideo","removeThreshold","getTime","sendUpdate","toUpperCase","ping","autoPlay","kind","participantNickname","process","getTracks","track","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","contains","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","ApiMediaFormat","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","videoClassName","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","selectIsDownloading","actualThreadInfo","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isBot","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","setScrollOffset","withBottomShift","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","appendixRef","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","willSwitchMessageList","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","addContact","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","foundContactIds","fullName","getUserFullName","contactId","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}